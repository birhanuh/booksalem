generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Book {
  id          Int      @id @default(autoincrement())
  author      String
  title       String
  description String?
  ISBN        String?
  status      String
  condition   String
  rating      Int?
  user        User?    @relation("user", fields: [userId], references: [id])
  owner       User?    @relation("owner", fields: [userId], references: [id])
  userId      Int?
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  Int
  language    Language @relation(fields: [languageId], references: [id])
  languageId  Int
  orders      Order[]
  User        User?    @relation(fields: [userId], references: [id])
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  password  String     @default("")
  name      String?
  isAdmin   Boolean    @default(false)
  books     Book[]
  user      Book[]     @relation("user")
  owner     Book[]     @relation("owner")
  orders    Order[]
  checkouts Checkout[]
  checkout  Checkout[] @relation("ownerCheck")
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  books Book[]
}

model Language {
  id    Int    @id @default(autoincrement())
  name  String
  books Book[]
}

model Order {
  id         Int       @id @default(autoincrement())
  unitPrice  Float
  quantity   Int
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  book       Book      @relation(fields: [bookId], references: [id])
  bookId     Int
  checkout   Checkout? @relation(fields: [checkoutId], references: [id])
  checkoutId Int?
}

model Checkout {
  id         Int     @id @default(autoincrement())
  status     String
  totalPrice Float
  orders     Order[]
  ownerCheck User?   @relation("ownerCheck", fields: [userId], references: [id])
  user       User?   @relation(fields: [userId], references: [id])
  userId     Int?
}
