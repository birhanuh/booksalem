### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AddBookPayload {
  books: books
  errors: Errors
}

type AuthPayload {
  errors: Errors
  token: String
  user: users
}

type books {
  author: String!
  condition: String!
  cover_url: String!
  description: String
  errors: Errors
  id: Int!
  isbn: Int
  orders: [orders!]!
  price: Float!
  published_date: DateTime
  rating: Int
  status: String!
  title: String!
}

input booksWhereUniqueInput {
  id: Int
  isbn: Int
  title: String
}

type categories {
  books: [books!]!
  id: Int!
  name: String!
}

type checkouts {
  checkout_date: DateTime
  checkout_type: String!
  id: Int!
  orders: orders
  price: Float!
  return_date: DateTime
  users: users!
}

"""Date custom scalar type"""
scalar Date

scalar DateTime

type Errors {
  message: String
  path: String
}

type Mutation {
  addBook(author: String!, categoryId: Int!, condition: String!, cover_url: String!, description: String, isbn: Int, languageId: Int!, price: Float!, published_date: Date, status: String!, title: String!): AddBookPayload
  createCheckout(checkout_type: String!, orderId: Int!, price: Float!): checkouts
  createOrder(bookId: Int!): orders
  deleteBook(id: Int!): books
  login(email: String!, password: String!): AuthPayload
  signup(email: String!, name: String!, password: String!, phone: String): AuthPayload
}

type orders {
  books: books!
  id: Int!
  users: users!
}

input ordersWhereUniqueInput {
  id: Int
  user_id_book_id: User_idBook_idCompoundUniqueInput
}

type Query {
  filterBooks(searchString: String): [books]
  getAvailableBooks: [books]
  getOrder(orderId: Int!): orders
  me: users
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input User_idBook_idCompoundUniqueInput {
  book_id: Int!
  user_id: Int!
}

type users {
  books(after: booksWhereUniqueInput, before: booksWhereUniqueInput, first: Int, last: Int): [books!]!
  email: String!
  id: Int!
  is_admin: Boolean!
  name: String!
  orders(after: ordersWhereUniqueInput, before: ordersWhereUniqueInput, first: Int, last: Int): [orders!]!
  password: String!
  phone: String
}
