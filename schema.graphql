### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  token: String
  user: users
}

type books {
  author: String!
  categories: categories!
  condition: String!
  description: String
  id: Int!
  isbn: Int
  language: String!
  orders: [orders!]!
  price: Float!
  published_date: DateTime
  rating: Int
  status: String!
  title: String!
}

type categories {
  books: [books!]!
  id: Int!
  name: String!
}

type checkouts {
  checkout_date: DateTime
  checkout_type: String!
  id: Int!
  orders: orders!
  price: Float!
  return_date: DateTime
  users: users!
}

scalar DateTime

type Mutation {
  addBook(author: String!, categoryId: Int!, condition: String!, description: String, isbn: Int, language: String!, price: Float!, published_date: String!, rating: Int, status: String!, title: String!): books
  createCheckout(checkout_type: String!, orderId: Int!, price: Float!): checkouts
  createOrder(bookId: Int!): orders
  deleteBook(id: Int!): books
  login(email: String!, password: String!): AuthPayload
  signup(email: String!, name: String!, password: String!): AuthPayload
}

type orders {
  books: books!
  id: Int!
  users: users!
}

type Query {
  filterBooks(searchString: String): [books]
  getAvailableBooks: [books]
  getOrder(orderId: Int!): orders
  me: users
}

type users {
  email: String!
  id: Int!
  is_admin: Boolean!
  name: String!
  orders: [orders!]!
  password: String!
}
