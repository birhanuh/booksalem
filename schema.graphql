### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AdminOrdersPayload {
  users: users
}

type AuthorPayload {
  author: authors
  errors: Errors
}

type authors {
  books: [books!]!
  id: Int!
  name: String!
}

type AuthPayload {
  errors: Errors
  token: String
  user: users
}

type BookPayload {
  book: books
  errors: Errors
}

type books {
  authors: authors
  categories: categories
  condition: String!
  cover_url: String!
  description: String
  id: Int!
  isbn: Int
  languages: languages
  orders(after: ordersWhereUniqueInput, before: ordersWhereUniqueInput, first: Int, last: Int): [orders!]!
  price: Float!
  published_date: String
  rating: Int
  status: String!
  title: String!
  type: String
  users: users
}

input booksWhereUniqueInput {
  id: Int
  isbn: Int
  title: String
}

type categories {
  books: [books!]!
  id: Int!
  name: String!
}

type checkouts {
  checkout_date: DateTime
  id: Int!
  orders: orders
  price: Float!
  return_date: DateTime
  users: users!
}

input checkoutsWhereUniqueInput {
  id: Int
}

"""Date custom scalar type"""
scalar DateTime

type Errors {
  message: String
  path: String
}

type languages {
  books: [books!]!
  id: Int!
  name: String!
}

type Mutation {
  addAuthor(name: String!): AuthorPayload
  addBook(authorId: Int!, categoryId: Int!, condition: String!, coverFile: Upload, description: String, isbn: Int, languageId: Int!, price: Float!, publishedDate: String, status: String!, title: String!, type: String): BookPayload
  cancelOrder(bookId: Int!): OrderPayload
  checkPassword(password: String!): UserPayload
  createAccount(email: String!, name: String!, password: String!, phone: String): AuthPayload
  createCheckout(orderId: Int!, price: Float!, returnDate: DateTime): checkouts
  createOrder(bookId: Int!): OrderPayload
  deleteBook(id: Int!): BookPayload
  signIn(email: String!, password: String!): AuthPayload
  updateBook(authorId: Int, bookId: Int!, categoryId: Int, condition: String, coverFile: Upload, description: String, isbn: Int, languageId: Int, price: Float, publishedDate: String, status: String, title: String, type: String): BookPayload
  updatePassword(password: String!): UserPayload
  updateProfile(email: String!, name: String!, phone: String): UserPayload
}

type OrderPayload {
  errors: Errors
  order: orders
}

type orders {
  book_id: Int!
  books: books!
  checkouts(after: checkoutsWhereUniqueInput, before: checkoutsWhereUniqueInput, first: Int, last: Int): [checkouts!]!
  id: Int!
  order_date: DateTime!
  status: String!
  user_id: Int!
  users: users!
}

input ordersWhereUniqueInput {
  id: Int
  user_id_book_id: User_idBook_idCompoundUniqueInput
}

type Query {
  filterBooks(searchString: String): [books]
  getAuthors: [authors]
  getAvailableBooks: [books]
  getBook(id: Int!): books
  getCategories: [categories]
  getLanguages: [languages]
  getOrderById(id: Int!): orders
  getUserOrdersAdmin(userId: Int!): users
  getUsersOrders: [orders]
  getUsersOrdersAdmin: [users]
  me: users
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input User_idBook_idCompoundUniqueInput {
  book_id: Int!
  user_id: Int!
}

type UserPayload {
  errors: Errors
  user: users
}

type users {
  books(after: booksWhereUniqueInput, before: booksWhereUniqueInput, first: Int, last: Int): [books!]!
  email: String!
  id: Int!
  is_admin: Boolean!
  last_sign_in: DateTime!
  name: String!
  orders(after: ordersWhereUniqueInput, before: ordersWhereUniqueInput, first: Int, last: Int): [orders!]!
  password: String!
  phone: String
}
